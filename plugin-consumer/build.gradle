import demo.plugin.implementation.impl.extservices.impl.BackgroundType

plugins {
    id 'java'
    id 'demo.plugin' version '0.1-SNAPSHOT'
}

defaultTasks('test', 'demoPluginGreeting')

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // http client
    implementation('io.projectreactor.netty:reactor-netty-http:1.1.0')
}

tasks.withType(Test) { useJUnitPlatform() }

// binaryResources.execTask.set null
binaryResources {
    execTask.set tasks.create('startDep', Exec) {
        it.description('starts a dependency')
        it.group('build setup')
        it.executable('/home/toor/.yarn/bin/http-server')
    }

    readinessProbe.set () -> {
        try {
            project.exec {
                executable('/bin/sh')
                args('-c',
                        'while ! nc -z localhost 3000 ; do sleep 1; done;')
            }.rethrowFailure()
            return true
        } catch(Throwable ignored) {
            return false
        }
    }
}

Process p

tasks.create('startDefStart') {
    it.description('starts a dependency')
    it.group('build setup')
    doFirst {
        p = new ProcessBuilder('npx', 'http-server', '-p', '3000')
                .inheritIO()
                .start()
    }
}

tasks.register('startDefEnd') {
    doFirst {
        println 'hello from startDefEnd'
        if (p)
        p.destroy()
        else println 'no process to destroy!'
    }
}

tasks.create('startDefWait', Exec) {
    it.dependsOn('startDefStart')
    doFirst {
        println 'hello from startDefWait'
    }
    executable('/bin/sh')
    args('-c',
            'while ! nc -z localhost 3000 ; do sleep 1; done;')
}

// unfortunately this is still necessary
test { finalizedBy 'startDefEnd' }

externalServices {
    defaultBackgroundType.set(BackgroundType.GRADLE_SERVICE)
    services {
        create('def') {
            start.set 'startDefWait'
            end.set 'startDefEnd'

            taskTypes.add Test // is already the default
        }
    }
    // externalServices.services.create('abc')
    // externalService {
    //     create('abc')
    // }
}
